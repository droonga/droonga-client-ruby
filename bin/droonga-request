#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

require "optparse"
require "yajl"
require "json"

require "droonga/client"

options = {
  :host                => Droonga::Client::DEFAULT_HOST,
  :port                => Droonga::Client::DEFAULT_PORT,
  :tag                 => Droonga::Client::DEFAULT_TAG,
  :default_dataset     => Droonga::Client::DEFAULT_DATASET,
  :protocol            => :droonga,
  :default_target_role => Droonga::Client::DEFAULT_TARGET_ROLE,
  :timeout             => 1,
  :exit_on_response    => true,
  :receiver_host       => Droonga::Client::DEFAULT_HOST,
  :receiver_port       => 0,
  :report_request      => false,
  :report_elapsed_time => true,
  :completion          => true,
  :validation          => true,
}

parser = OptionParser.new
parser.version = Droonga::Client::VERSION
parser.banner += " REQUEST_JSON_FILE"
parser.separator("")
parser.separator("Connect:")
parser.on("--host=HOST",
          "Host name of the endpoint to communicate with the Droonga cluster.",
          "(#{options[:host]})") do |host|
  options[:host] = host
end
parser.on("--port=PORT", Integer,
          "Port number to communicate with the endpoint of the Droonga cluster.",
          "(#{options[:port]})") do |port|
  options[:port] = port
end
parser.on("--tag=TAG",
          "Tag name to communicate with the endpoint of the Droonga cluster.",
          "(#{options[:tag]})") do |tag|
  options[:tag] = tag
end
available_protocols = [:droonga, :http]
parser.on("--protocol=PROTOCOL", available_protocols,
          "Protocol to communicate with the endpoint of the Droonga cluster.",
          "[#{available_protocols.join('|')}]",
          "(#{options[:protocol]})") do |protocol|
  options[:protocol] = protocol
end
parser.separator("")
parser.separator("Timeout:")
parser.on("--timeout=TIMEOUT", Integer,
          "Time to terminate unresponsive connections, in seconds.",
          "(#{options[:timeout]})") do |timeout|
  options[:timeout] = timeout
end
parser.on("--[no-]exit-on-response",
          "Exit when a response is received.",
          "(#{options[:exit_on_response]})") do |exit_on_response|
  options[:exit_on_response] = exit_on_response
end
parser.separator("")
parser.separator("Droonga protocol:")
parser.on("--receiver-host=HOST",
          "Host name of the computer you are running this command.",
          "(#{options[:receiver_host]})") do |host|
  options[:receiver_host] = host
end
parser.on("--receiver-port=PORT", Integer,
          "Port number to be received a response from Droonga engine.",
          "(#{options[:receiver_port]})") do |port|
  options[:receiver_port] = port
end
parser.separator("")
parser.separator("Report:")
parser.on("--[no-]report-request",
          "Reports request messages actually sent.",
          "(#{options[:report_request]})") do |report_request|
  options[:report_request] = report_request
end
parser.on("--[no-]report-elapsed-time",
          "Reports elapsed time between a request and a response.",
          "(#{options[:report_elapsed_time]})") do |report_elapsed_time|
  options[:report_elapsed_time] = report_elapsed_time
end
parser.separator("")
parser.separator("Messages:")
parser.on("--detault-dataset=NAME",
          "Default dataset name for sending messages.",
          "(#{options[:default_dataset]})") do |name|
  options[:default_dataset] = name
end
parser.on("--detault-target-role=ROLE",
          "Default role of engine nodes which should process messages.",
          "(#{options[:default_target_role]})") do |role|
  options[:default_target_role] = role
end
parser.on("--[no-]completion",
          "Do completion of required fields for input messages or not.",
          "(#{options[:completion]})") do |completion|
  options[:completion] = completion
end
parser.on("--[no-]validation",
          "Do validation for input messages or not.",
          "(#{options[:validation]})") do |validation|
  options[:validation] = validation
end
request_json_files = parser.parse!(ARGV)

client = Droonga::Client.new(options)
json_parser = Yajl::Parser.new
json_parser.on_parse_complete = lambda do |request_message|
  if options[:report_request]
    message = "Request: "
    request_message = client.complete(request_message)
    begin
      message << JSON.pretty_generate(request_message)
    rescue
      message << request_message.inspect
    end
    message << "\n"
    print(message)
  end
  start = Time.now
  request = client.request(request_message) do |response|
    message = ""
    if options[:report_elapsed_time]
      message << "Elapsed time: #{Time.now - start}\n"
    end
    begin
      message << JSON.pretty_generate(response)
    rescue
      message << response.inspect
    end
    message << "\n"
    print(message)
    break if options[:exit_on_response]
  end
  request.wait
end

if request_json_files.empty?
  json_parser.parse($stdin)
else
  request_json_files.each do |request_json_file|
    File.open(request_json_file) do |input|
      json_parser.parse(input)
    end
  end
end
