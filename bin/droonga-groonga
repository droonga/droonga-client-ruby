#!/usr/bin/env ruby
#
# Copyright (C) 2015 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "json"

require "droonga/command/base"
require "grn2drn/command-converter"

module Droonga
  module Command
    class Groonga < Base
      class InvalidCommandName < StandardError
      end

      class MissingCommandName < StandardError
      end

      def run
        parse_options do |option|
          option.banner("Usage: droonga-groonga [groonga-command-name] [options]\n" +
                        "   ex: droonga-groonga select --table=Users")

          option.on(:"dry-run",
                    "Only reports messages converted from Groonga to Droonga.",
                    :default => false)

          option.separator("Formatting:")
          option.on(:pretty,
                    "Output result as a pretty print JSON.",
                    :default => false)
        end

        unless ARGV.empty?
          groonga_command_args = ARGV.collect do |arg|
            if /\s/ =~ arg
              JSON.generate(arg)
            else
              arg
            end
          end
          command_converter.convert(groonga_command_args.join(" ")) do |command|
            process_groonga_message(command)
          end
        else
          command_converter.convert(ARGF) do |command|
            process_groonga_message(command)
          end
        end

        true
      rescue MissingRequiredParameter
        puts(@options)
        false
      rescue NoResponse
        puts("Error: request timed out.")
        false
      end

      private
      def process_groonga_message(groonga_message)
        if @options[:"dry-run"]
          if @options[:pretty]
            puts(JSON.pretty_generate(groonga_message))
          else
            puts(JSON.generate(groonga_message))
          end
          return
        end

        response = request(groonga_message)
        raise NoResponse.new unless response
        body = response["body"]

        if @options[:pretty]
          puts(JSON.pretty_generate(body))
        else
          puts(JSON.generate(body))
        end
      end

      def command_converter
        @command_converter ||= create_command_converter
      end

      def create_command_converter
        convert_options = {
          :id_prefix => "droonga-groonga:",
          :dataset   => @options[:dataset],
        }
        ::Grn2Drn::CommandConverter.new(convert_options)
      end
    end
  end
end

exit(Droonga::Command::Groonga.new.run)
