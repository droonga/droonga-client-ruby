#!/usr/bin/env ruby
#
# Copyright (C) 2015 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "json"

require "droonga/command/base"

module Droonga
  module Command
    class Groonga < Base
      class InvalidCommandName < StandardError
      end

      class MissingCommandName < StandardError
      end

      def run
        parse_options do |option|
          option.banner("Usage: droonga-groonga [groonga-command-name] [options]\n" +
                        "   ex: droonga-groonga select --table=Users")

          option.separator("Formatting:")
          option.on(:pretty,
                    "Output result as a pretty print JSON.",
                    :default => false)
        end

        @command = ARGV.shift
        assert_valid_command

        groonga_message = {
          "dataset" => @options[:dataset],
          "type" => @command,
          "body" => build_params(ARGV),
        }

        response = client.request(groonga_message)
        body = response["body"]

        if @options[:pretty]
          puts(JSON.pretty_generate(body))
        else
          puts(JSON.generate(body))
        end

        true
      rescue InvalidCommandName, MissingCommandName
        puts(@options)
        true
      end

      private
      def assert_valid_command
        raise InvalidCommandName.new(@command) if /\A--.+\z/ =~ @command
        raise MissingCommandName.new if @command.nil?
      end

      def build_params(argv)
        params = {}
        option_name = nil
        argv.each do |arg|
          case arg
          when /\A--([^\s=]+)=(.+)\z/
            params[$1] = $2
          when /\A--([^\s=]+)\z/
            option_name = $1
          else
            if option_name
              params[option_name] = arg
              option_name = nil
            end
          end
        end
        params
      end
    end
  end
end

exit(Droonga::Command::Groonga.new.run)
