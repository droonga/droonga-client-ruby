#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

require "ostruct"
require "optparse"
require "yajl"
require "json"

require "droonga/client"

options = OpenStruct.new
options.report_request = false
options.report_throughput = false

servers = []
default_server = "droonga:localhost:24224/droonga"
messages_per_second = Droonga::Client::RateLimiter::NO_LIMIT

def parse_server(server)
  connect_info, tag = server.split(/\//, 2)
  protocol, host, port = connect_info.split(/:/, 3)
  {
    :host     => host,
    :port     => Integer(port),
    :protocol => protocol.to_sym,
    :tag      => tag,
  }
end

class ThroughputReporter
  def initialize
    @start_time = Time.now
    @measure_start_time = Time.now
    @n_sent_messages = 0
    @first_report = true
  end

  def on_message_sent
    @n_sent_messages += 1
    current_time = Time.now
    measure_span_in_second = current_time - @measure_start_time
    if measure_span_in_second > 1
      messages_per_second = @n_sent_messages / measure_span_in_second
      if @first_report
        @first_report = false
      else
        move_to_previous_line
      end
      print("% 8.3f messages/second\n" % messages_per_second)
      @n_sent_messages = 0
      @measure_start_time = current_time
    end
  end

  private
  def move_to_previous_line
    print("\e[1A\r")
  end
end

parser = OptionParser.new
parser.banner += " REQUEST_JSON_FILE1 REQUEST_JSON_FILE2 ..."
parser.separator("")
parser.separator("Connection:")
parser.on("--server=PROTOCOL:HOST:PORT/TAG",
          "Droonga server to be connected.",
          "Use multiple servers to use round-robin requests.",
          "Specify this option multiple times to use multiple servers.",
          "(#{default_server})") do |server|
  servers << server
end
parser.on("--messages-per-second=N", Integer,
          "Apply rate limitation by N messages/second.",
          "'#{Droonga::Client::RateLimiter::NO_LIMIT}' means no limit.",
          "(#{messages_per_second})") do |n|
  messages_per_second = n
end
parser.separator("")
parser.separator("Report:")
parser.on("--[no-]report-request",
          "Reports request message.",
          "(#{options.report_request})") do |report_request|
  options.report_request = report_request
end
parser.on("--report-throughput",
          "Reports throughput by messages per second.",
          "(no)") do
  options.report_throughput = true
end
request_json_files = parser.parse!(ARGV)

servers << default_server if servers.empty?
clients = servers.collect do |server|
  client_options = parse_server(server)
  client = Droonga::Client.new(client_options)
  Droonga::Client::RateLimiter.new(client, messages_per_second)
end

if options.report_throughput
  throughput_reporter = ThroughputReporter.new
end

client_index = 0
json_parser = Yajl::Parser.new
json_parser.on_parse_complete = lambda do |request_message|
  if options.report_request
    message = "Request: "
    begin
      message << JSON.pretty_generate(request_message)
    rescue
      message << request_message.inspect
    end
    message << "\n"
    print(message)
  end
  client = clients[client_index]
  client.send(request_message)
  client_index = (client_index + 1) % clients.size
  throughput_reporter.on_message_sent if throughput_reporter
end

if request_json_files.empty?
  json_parser.parse($stdin)
else
  request_json_files.each do |request_json_file|
    File.open(request_json_file) do |input|
      json_parser.parse(input)
    end
  end
end
