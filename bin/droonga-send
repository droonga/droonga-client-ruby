#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

require "ostruct"
require "optparse"
require "yajl"
require "json"

require "droonga/client"

options = OpenStruct.new
options.report_request = false
options.report_throughput = false
options.default_protocol = Droonga::Client::DEFAULT_PROTOCOL
options.default_host     = Droonga::Client::DEFAULT_HOST
options.default_port     = Droonga::Client::DEFAULT_PORT
options.default_tag      = Droonga::Client::DEFAULT_TAG
options.default_dataset  = Droonga::Client::DEFAULT_DATASET
options.default_target_role = Droonga::Client::DEFAULT_TARGET_ROLE
options.completion       = true
options.validation       = true

servers = []
default_server = "#{options.default_protocol}:#{options.default_host}:#{options.default_port}/#{options.default_tag}"
messages_per_second = Droonga::Client::RateLimiter::DEFAULT_LIMIT

def parse_server(server, options)
  server_matcher = /\A(?:(droonga|http):)?([^:]+)(?::([0-9]+))?(?:\/(.+))?\z/
  server =~ server_matcher
  protocol = $1
  host     = $2
  port     = $3
  tag      = $4

  if protocol and host =~ /\A[0-9]+\z/ and port.nil?
    # "host:port" case can be detected as "protocol:host" wrongly.
    port     = host
    host     = protocol
    protocol = nil
  end

  protocol ||= options.default_protocol.to_s
  port     ||= options.default_port
  tag      ||= options.default_tag

  {
    :host     => host,
    :port     => Integer(port),
    :protocol => protocol.downcase.to_sym,
    :tag      => tag,
    :default_dataset => options.default_dataset,
    :default_target_role => options.default_target_role,
    :completion => options.completion,
    :validation => options.validation,
  }
end

class ThroughputReporter
  def initialize
    @start_time = Time.now
    @measure_start_time = Time.now
    @n_sent_messages = 0
    @first_report = true
  end

  def on_message_sent
    @n_sent_messages += 1
    current_time = Time.now
    measure_span_in_second = current_time - @measure_start_time
    if measure_span_in_second > 1
      messages_per_second = @n_sent_messages / measure_span_in_second
      if @first_report
        @first_report = false
      else
        move_to_previous_line
      end
      print("% 8.3f messages/second\n" % messages_per_second)
      @n_sent_messages = 0
      @measure_start_time = current_time
    end
  end

  private
  def move_to_previous_line
    print("\e[1A\r")
  end
end

parser = OptionParser.new
parser.version = Droonga::Client::VERSION
parser.banner += " REQUEST_JSON_FILE1 REQUEST_JSON_FILE2 ..."
parser.separator("")
parser.separator("Connection:")
parser.on("--server=PROTOCOL:HOST:PORT/TAG",
          "Droonga server to be connected.",
          "Use multiple servers to use round-robin requests.",
          "Specify this option multiple times to use multiple servers.",
          "Protocol, port, and tag can be provided via other options ",
          "but host name must be specified.",
          "(#{default_server})") do |server|
  servers << server
end
parser.on("--messages-per-second=N", Integer,
          "Maximum number of messages to be sent in a second.",
          "'#{Droonga::Client::RateLimiter::NO_LIMIT}' means \"no limit\".",
          "(#{messages_per_second})") do |n|
  messages_per_second = n
end
parser.on("--default-protocol=PROTOCOL",
          "Default protocol to communicate with endpoints of the Droonga cluster.",
          "(#{options.default_protocol})") do |protocol|
  options.default_protocol = protocol.downcase.to_sym
end
parser.on("--default-port=PORT", Integer,
          "Default port number to communicate with endpoints of the Droonga cluster.",
          "(#{options.default_port})") do |port|
  options.default_port = port
end
parser.on("--default-tag=TAG",
          "Default tag name to communicate with the endpoints of the Droonga cluster.",
          "(#{options.default_tag})") do |tag|
  options.default_tag = tag
end
parser.separator("")
parser.separator("Report:")
parser.on("--[no-]report-request",
          "Reports request messages.",
          "(#{options.report_request})") do |report_request|
  options.report_request = report_request
end
parser.on("--[no-]report-throughput",
          "Reports throughput by messages per second.",
          "(#{options.report_throughput})") do
  options.report_throughput = true
end
parser.separator("")
parser.separator("Messages:")
parser.on("--default-dataset=NAME",
          "Default dataset name for sending messages.",
          "(#{options.default_dataset})") do |name|
  options.default_dataset = name
end
parser.on("--default-target-role=ROLE",
          "Default role of engine nodes which should process messages.",
          "(#{options.default_target_role})") do |role|
  options.default_target_role = role
end
parser.on("--[no-]completion",
          "Do completion of required fields for input messages or not.",
          "(#{options.completion})") do |completion|
  options.completion = completion
end
parser.on("--[no-]validation",
          "Do validation for input messages or not.",
          "(#{options.validation})") do |validation|
  options.validation = validation
end
request_json_files = parser.parse!(ARGV)

servers << default_server if servers.empty?
if messages_per_second > 0 and servers.size > 1
  messages_per_second = messages_per_second / servers.size
end
clients = servers.collect do |server|
  client_options = parse_server(server, options)
  client = Droonga::Client.new(client_options)
  Droonga::Client::RateLimiter.new(client, messages_per_second)
end

if options.report_throughput
  throughput_reporter = ThroughputReporter.new
end

client_index = 0
json_parser = Yajl::Parser.new
json_parser.on_parse_complete = lambda do |request_message|
  client = clients[client_index]
  if options.report_request
    message = "Request: "
    request_message = client.complete(request_message)
    begin
      message << JSON.pretty_generate(request_message)
    rescue
      message << request_message.inspect
    end
    message << "\n"
    print(message)
  end
  client.send(request_message)
  client_index = (client_index + 1) % clients.size
  throughput_reporter.on_message_sent if throughput_reporter
end

if request_json_files.empty?
  json_parser.parse($stdin)
else
  request_json_files.each do |request_json_file|
    File.open(request_json_file) do |input|
      json_parser.parse(input)
    end
  end
end
